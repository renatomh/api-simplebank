// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: withdraw.sql

package db

import (
	"context"
)

const createWithdraw = `-- name: CreateWithdraw :one
INSERT INTO withdraws (
  account_id,
  amount,
  "user"
) VALUES (
  $1, $2, $3
) RETURNING id, account_id, amount, "user", created_at
`

type CreateWithdrawParams struct {
	AccountID int64  `json:"account_id"`
	Amount    int64  `json:"amount"`
	User      string `json:"user"`
}

func (q *Queries) CreateWithdraw(ctx context.Context, arg CreateWithdrawParams) (Withdraw, error) {
	row := q.db.QueryRowContext(ctx, createWithdraw, arg.AccountID, arg.Amount, arg.User)
	var i Withdraw
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.User,
		&i.CreatedAt,
	)
	return i, err
}

const getwithdraw = `-- name: Getwithdraw :one
SELECT id, account_id, amount, "user", created_at FROM withdraws
WHERE id = $1 LIMIT 1
`

func (q *Queries) Getwithdraw(ctx context.Context, id int64) (Withdraw, error) {
	row := q.db.QueryRowContext(ctx, getwithdraw, id)
	var i Withdraw
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.User,
		&i.CreatedAt,
	)
	return i, err
}

const listWithdraws = `-- name: ListWithdraws :many
SELECT id, account_id, amount, "user", created_at FROM withdraws
WHERE 
    account_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListWithdrawsParams struct {
	AccountID int64 `json:"account_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListWithdraws(ctx context.Context, arg ListWithdrawsParams) ([]Withdraw, error) {
	rows, err := q.db.QueryContext(ctx, listWithdraws, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Withdraw{}
	for rows.Next() {
		var i Withdraw
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.User,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
