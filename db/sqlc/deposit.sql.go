// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: deposit.sql

package db

import (
	"context"
)

const createDeposit = `-- name: CreateDeposit :one
INSERT INTO deposits (
  account_id,
  amount,
  "user"
) VALUES (
  $1, $2, $3
) RETURNING id, account_id, amount, "user", created_at
`

type CreateDepositParams struct {
	AccountID int64  `json:"account_id"`
	Amount    int64  `json:"amount"`
	User      string `json:"user"`
}

func (q *Queries) CreateDeposit(ctx context.Context, arg CreateDepositParams) (Deposit, error) {
	row := q.db.QueryRowContext(ctx, createDeposit, arg.AccountID, arg.Amount, arg.User)
	var i Deposit
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.User,
		&i.CreatedAt,
	)
	return i, err
}

const getDeposit = `-- name: GetDeposit :one
SELECT id, account_id, amount, "user", created_at FROM deposits
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDeposit(ctx context.Context, id int64) (Deposit, error) {
	row := q.db.QueryRowContext(ctx, getDeposit, id)
	var i Deposit
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.User,
		&i.CreatedAt,
	)
	return i, err
}

const listDeposits = `-- name: ListDeposits :many
SELECT id, account_id, amount, "user", created_at FROM deposits
WHERE 
    account_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListDepositsParams struct {
	AccountID int64 `json:"account_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListDeposits(ctx context.Context, arg ListDepositsParams) ([]Deposit, error) {
	rows, err := q.db.QueryContext(ctx, listDeposits, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Deposit{}
	for rows.Next() {
		var i Deposit
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.User,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
